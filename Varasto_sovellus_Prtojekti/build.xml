<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<!-- WARNING: Eclipse auto-generated file.
              Any modifications will be overwritten.
              To include a user specific buildfile here, simply create one in the same
              directory with the processing instruction <?eclipse.ant.import?>
              as the first entry and export the buildfile again. --><project basedir="." default="build" name="Varasto_sovellus_Prtojekti">
    <property environment="env"/>
    <property name="ECLIPSE_HOME" value="../../../../../ecplise/eclipse-SDK-4.5.1-win32-x86_64-distro-2.1.0/eclipse/"/>
    <property name="junit.output.dir" value="junit"/>
    <property name="debuglevel" value="source,lines,vars"/>
    <property name="target" value="1.8"/>
    <property name="source" value="1.8"/>
  	<property name="bin.dir" location="/opt/bitnami/apps/jenkins/jenkins_home/jobs/S2016 Varastosovellus/workspace/Varasto_sovellus_Prtojekti/bin" />
  	<property name="findbugs.home.dir" value="/opt/bitnami/apps/jenkins/jenkins_home/jobs/S2016 Varastosovellus/workspace/Varasto_sovellus_Prtojekti/findbugs" />
  	<property name="report.findbugs.dir" value="/opt/bitnami/apps/jenkins/jenkins_home/jobs/S2016 Varastosovellus/workspace/Varasto_sovellus_Prtojekti/findbugs" />
    <path id="JUnit 4.libraryclasspath">
        <pathelement location="${ECLIPSE_HOME}plugins/org.junit_4.12.0.v201504281640/junit.jar"/>
        <pathelement location="${ECLIPSE_HOME}plugins/org.hamcrest.core_1.3.0.v201303031735.jar"/>
    </path>
    <path id="Varasto_sovellus_Prtojekti.classpath">
        <pathelement location="bin"/>
        <path refid="JUnit 4.libraryclasspath"/>
        <pathelement location="sql_connector/mysql-connector-java-5.1.38-bin.jar"/>
        <pathelement location="Junit/junit.jar"/>
        <pathelement location="TestFx/testFx-3.1.2.jar"/>
        <pathelement location="TestFx/hamcrest-all-1.3.jar"/>
        <pathelement location="TestFx/guava-14.0.1.jar"/>
        <pathelement location="TestFx/hamcrest-core-1.3.jar"/>
    </path>
    <target name="init">
        <mkdir dir="bin"/>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="src">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.xtend"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
        <copy includeemptydirs="false" todir="bin">
            <fileset dir="tests">
                <exclude name="**/*.launch"/>
                <exclude name="**/*.xtend"/>
                <exclude name="**/*.java"/>
            </fileset>
        </copy>
    </target>
    <target name="clean">
        <delete dir="bin"/>
    </target>
    <target depends="clean" name="cleanall"/>
    <target depends="build-subprojects,build-project" name="build"/>
    <target name="build-subprojects"/>
    <target depends="init" name="build-project">
        <echo message="${ant.project.name}: ${ant.file}"/>
        <javac debug="true" debuglevel="${debuglevel}" destdir="bin" includeantruntime="false" source="${source}" target="${target}">
            <src path="src"/>
            <src path="tests"/>
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </javac>
    </target>
    <target description="Build all projects which reference this project. Useful to propagate changes." name="build-refprojects"/>
    <target description="copy Eclipse compiler jars to ant lib directory" name="init-eclipse-compiler">
        <copy todir="${ant.library.dir}">
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </copy>
        <unzip dest="${ant.library.dir}">
            <patternset includes="jdtCompilerAdapter.jar"/>
            <fileset dir="${ECLIPSE_HOME}/plugins" includes="org.eclipse.jdt.core_*.jar"/>
        </unzip>
    </target>
    <target description="compile project with Eclipse compiler" name="build-eclipse-compiler">
        <property name="build.compiler" value="org.eclipse.jdt.core.JDTCompilerAdapter"/>
        <antcall target="build"/>
    </target>
    <target name="(default package)">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="DataBase_tests" todir="${junit.output.dir}"/>
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </junit>
    </target>
    <target name="DataBase_tests" depends="build">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="DataBase_tests" todir="${junit.output.dir}"/>
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </junit>
    </target>
    <target name="DataBase_tests.LogIn_AidotTunnukset">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="DataBase_tests" todir="${junit.output.dir}"/>
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </junit>
    </target>
    <target name="jjj">
        <java classname="vPakkaus.Controllers.jjj" failonerror="true" fork="yes">
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </java>
    </target>
    <target name="LogInTestFX_TEST" depends="build">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="testfx.LogInTestFX_TEST" todir="${junit.output.dir}"/>
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </junit>
    </target>
    <target name="MainLaunch">
        <java classname="vPakkaus.MainLaunch" failonerror="true" fork="yes">
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </java>
    </target>
    <target name="MainPageTestFX_TEST" depends="build">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="testfx.MainPageTestFX_TEST" todir="${junit.output.dir}"/>
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </junit>
    </target>
    <target name="N채kym채_JA_app_test">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="N채kym채_JA_app_test" todir="${junit.output.dir}"/>
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </junit>
    </target>
    <target name="Product_Test" depends="build">
        <mkdir dir="${junit.output.dir}"/>
        <junit fork="yes" printsummary="withOutAndErr">
            <formatter type="xml"/>
            <test name="Product_Test" todir="${junit.output.dir}"/>
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </junit>
    </target>
    <target name="Testi">
        <java classname="vPakkaus.testi" failonerror="true" fork="yes">
            <classpath refid="Varasto_sovellus_Prtojekti.classpath"/>
        </java>
    </target>
    <target name="junitreport">
        <junitreport todir="${junit.output.dir}">
            <fileset dir="${junit.output.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.output.dir}"/>
        </junitreport>
    </target>
  	<target name="findbugs" depends="build" description="Run code analysis over code to check for problems."
  	    ><!---->
  	        <!-- Fail this target if FindBugs is not installed. -->
  	        <available file="${findbugs.home.dir}/lib/findbugs.jar" property="findbugs.available" />
  	        <!--<fail unless="findbugs.available"
  	              message="Error: FINDBUGS_HOME not set or findbugs.jar not found. ${findbugs.home.dir}/findbugs.jar"
  	        />-->
  		<taskdef name="findbugs"
  		    classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
  		    <classpath>
  		       <fileset file="${findbugs.home.dir}/lib/findbugs.jar"/>
  		    	<fileset file="${findbugs.home.dir}/lib/findbugs-ant.jar"/>
  		    </classpath>
  		</taskdef>

  	        <!-- Run FindBugs. -->
  	        <mkdir dir="${report.findbugs.dir}" />
  	        <findbugs home="${findbugs.home.dir}"
  	                  workHard="true"
  	                  output="xml:withMessages"
  	                  outputFile="${report.findbugs.dir}/findbugs.xml">
  	            <class location="${bin.dir}" />
  	            <auxClasspath refid="Varasto_sovellus_Prtojekti.classpath">
  	                <!--<fileset file="/opt/bitnami/apps/jenkins/jenkins_home/jobs/S2016 Varastosovellus/workspace/Varasto_sovellus_Prtojekti/Junit/junit.jar" />
  	            	<fileset file="/opt/bitnami/apps/jenkins/jenkins_home/jobs/S2016 Varastosovellus/workspace/Varasto_sovellus_Prtojekti/Junit/org.hamcrest.core_1.3.0.v201303031735.jar" />
  	            	-->
            	</auxClasspath>
  	        	<sourcePath path="/opt/bitnami/apps/jenkins/jenkins_home/jobs/S2016 Varastosovellus/workspace/Varasto_sovellus_Prtojekti/src"/>
  	        </findbugs>
  	    </target>

      <!--	<target name="report.findbugs" description="Generate a report on error analysis.">
  	        <xslt in="${report.findbugs.dir}/findbugs.xml"
  	              style="${findbugs.home.dir}/src/xsl/fancy.xsl"
  	              out="${report.findbugs.dir}/findbugs-default.html"
  	        />
  	    </target>-->
</project>
